#!/usr/bin/env python3
"""
Browser Graph Viewer

This script creates HTML files with Mermaid graphs that can be viewed in a browser.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src import create_basic_workflow, create_enhanced_workflow, create_conditional_workflow

def create_html_with_mermaid(mermaid_code, title):
    """Create HTML file with Mermaid graph"""
    html_template = f"""
<!DOCTYPE html>
<html>
<head>
    <title>{title}</title>
    <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #333;
            text-align: center;
        }}
        .mermaid {{
            text-align: center;
            margin: 20px 0;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>{title}</h1>
        <div class="mermaid">
{mermaid_code}
        </div>
        <p style="text-align: center; color: #666; margin-top: 20px;">
            Generated by LangGraph Text Analysis Pipeline
        </p>
    </div>
    
    <script>
        mermaid.initialize({{ startOnLoad: true }});
    </script>
</body>
</html>
"""
    return html_template

def main():
    """Create HTML files for viewing graphs in browser"""
    print("Browser Graph Viewer")
    print("=" * 25)
    
    # Create output directory
    output_dir = os.path.join(os.path.dirname(__file__), '..', 'output')
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    workflows = [
        ("Basic Workflow", create_basic_workflow(), "basic_workflow.html"),
        ("Enhanced Workflow", create_enhanced_workflow(), "enhanced_workflow.html"),
        ("Conditional Workflow", create_conditional_workflow(), "conditional_workflow.html")
    ]
    
    print(f"Creating HTML files in: {output_dir}")
    print("-" * 40)
    
    for title, app, filename in workflows:
        try:
            print(f"Processing {title}...")
            
            # Get Mermaid code
            mermaid_code = app.get_graph().draw_mermaid()
            
            # Create HTML
            html_content = create_html_with_mermaid(mermaid_code, title)
            
            # Save file
            filepath = os.path.join(output_dir, filename)
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            print(f"SUCCESS: {filename} created")
            
        except Exception as e:
            print(f"ERROR: Failed to create {title}: {e}")
    
    print(f"\n" + "=" * 40)
    print("HTML files created! You can now:")
    print("1. Navigate to the output directory")
    print("2. Open any .html file in your web browser")
    print("3. View the interactive workflow graphs")

if __name__ == "__main__":
    main()